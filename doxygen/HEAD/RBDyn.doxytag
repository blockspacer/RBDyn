<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Body.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00320</filename>
    <class kind="class">rbd::Body</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aef3e2f68a8f7a4ce79266e72ddaabb5e</anchor>
      <arglist>(std::ostream &amp;out, const Body &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoM.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00323</filename>
    <includes id="a00356" name="Jacobian.h" local="yes" imported="no">Jacobian.h</includes>
    <class kind="class">rbd::CoMJacobianDummy</class>
    <class kind="class">rbd::CoMJacobian</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoM</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa3d5affc22a2a8da050bec954dbe49e7</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aae7a9a01b7d8e8f0113ac0ced2f3359f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a66536ad8e1924b87c9b376d151f7321e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoM</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1dce1b30151f67949e67f9da9b248960</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a546da91f76a26766fe29b6269f4b6eaf</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a36f0a66ff371f16920fa8451d48e3014</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Coriolis.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00326</filename>
    <includes id="a00323" name="CoM.h" local="no" imported="no">RBDyn/CoM.h</includes>
    <includes id="a00356" name="Jacobian.h" local="no" imported="no">RBDyn/Jacobian.h</includes>
    <includes id="a00368" name="MultiBodyConfig.h" local="no" imported="no">RBDyn/MultiBodyConfig.h</includes>
    <class kind="class">rbd::Coriolis</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>EulerIntegration.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00329</filename>
    <includes id="a00359" name="Joint.h" local="yes" imported="no">Joint.h</includes>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerJointIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3bd2d0d6d7e28cb91bf1d4595c170eed</anchor>
      <arglist>(Joint::Type type, const std::vector&lt; double &gt; &amp;alpha, const std::vector&lt; double &gt; &amp;alphaD, double step, std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af1d5e428f8fea58734485e214420ad45</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sEulerIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>abd0e7a890bf8ed1ba9790c65f2b172c2</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FA.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00332</filename>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7cabedab4efa117bdc2f511c1277899a</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a24c441619953f5394c7053ccf75714ba</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FD.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00335</filename>
    <class kind="class">rbd::ForwardDynamics</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>FK.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00338</filename>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardKinematics</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a96c3cea742bc063bc8cac29d42411ac9</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardKinematics</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a11ae46b6402eb8d74f53677aca71babb</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FV.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00341</filename>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a45a97f5d7650231c3d723a11c9408cd8</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a6fdbf73c467ae855e5aadcc0589b55ab</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ID.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00344</filename>
    <class kind="class">rbd::InverseDynamics</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>IDIM.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00347</filename>
    <class kind="class">rbd::IDIM</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 6, 10 &gt;</type>
      <name>IMPhi</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a866fa89d4831928b912c77db84f30309</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 10, 1 &gt;</type>
      <name>inertiaToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a6269a1cc3506d5512fbd8ec28fcedb84</anchor>
      <arglist>(const sva::RBInertiad &amp;rbi)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>vectorToInertia</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ab336ae166080460a4b1eedce786f3fc3</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 10, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>sVectorToInertia</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a002a80a20c11b6e84b9dfc200412346b</anchor>
      <arglist>(const Eigen::VectorXd &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>multiBodyToInertialVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a0a9fb61b32a276321b743b72aa27fbbf</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IK.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00350</filename>
    <includes id="a00356" name="Jacobian.h" local="yes" imported="no">Jacobian.h</includes>
    <class kind="class">rbd::InverseKinematics</class>
    <namespace>rbd</namespace>
    <namespace>rbd::ik</namespace>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>MAX_ITERATIONS</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>ae317f521fae5c7b22bfbb9a78a61d18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>LAMBDA</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a7d33a0a91940347106715aec2c101e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>THRESHOLD</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a8b016fd4f8f2731c231d7318c18a5ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>ALMOST_ZERO</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a60f8b844c5af661d2a90adb93619d2c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IS.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00353</filename>
    <includes id="a00356" name="Jacobian.h" local="yes" imported="no">Jacobian.h</includes>
    <class kind="class">rbd::InverseStatics</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>Jacobian.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00356</filename>
    <includes id="a00365" name="MultiBody.h" local="yes" imported="no">MultiBody.h</includes>
    <class kind="struct">rbd::Block</class>
    <class kind="class">rbd::Jacobian</class>
    <namespace>rbd</namespace>
    <member kind="typedef">
      <type>std::vector&lt; Block &gt;</type>
      <name>Blocks</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>addcc00b58bd78ec27ff56ad979f5ff2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Joint.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00359</filename>
    <class kind="class">rbd::Joint</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>Eigen::Matrix3&lt; T &gt;</type>
      <name>QuatToE</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7d00127b1f623476b945e05e88eb95d6</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac3088586b9fe6169533319c4dba20e9f</anchor>
      <arglist>(std::ostream &amp;out, const Joint &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Momentum.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00362</filename>
    <class kind="class">rbd::CentroidalMomentumMatrix</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentum</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af952b30ce2254dab6cebbe22e95baa9c</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentumDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a8988ff9653a5fc0595dabd3938622b37</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentum</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a917e5b58d319f5b36753ea5e158b60b4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentumDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>afe9772d66d45b249d91b081492dddc5e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiBody.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00365</filename>
    <includes id="a00320" name="Body.h" local="yes" imported="no">Body.h</includes>
    <includes id="a00359" name="Joint.h" local="yes" imported="no">Joint.h</includes>
    <class kind="class">rbd::MultiBody</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>MultiBodyConfig.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00368</filename>
    <includes id="a00365" name="MultiBody.h" local="yes" imported="no">MultiBody.h</includes>
    <class kind="struct">rbd::MultiBodyConfig</class>
    <class kind="class">rbd::ConfigConverter</class>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>paramToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4bf39e343eab5ea745b6b5ad06e1322c</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sParamToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa230afce88a5b03f4cdb24bbe5697709</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>paramToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4e97ed59ef038e4668d094c149f4dbf4</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sParamToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4553c85e948490a728217442f42017a5</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>dofToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a35ba4e7bcaf28864ee5b873aa2f7ad98</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sDofToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a40551e81dcb5a17dc51f28e51df91ab7</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>vectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ae1506b1cecfe2dc93145cdee35024021</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sVectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa53030956d0aaa3b8f8573f876551cdf</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad81da92788d049e1111ea95aad747d9a</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a9a12e59958ebc1de682cb558002236fa</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToDof</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4e26c3bab795feca51d727beb784cf13</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToDof</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aac7e53f4e1a1bf92a34842130f017325</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchBodiesVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a962a1e605f4f3936684e8a18c30e10c6</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchJointsVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4a2ee0f62601c711eeeedd9b38191c8c</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyPos</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ab3ad6457f66a076b7e3743ba5883d774</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchParentToSon</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac65ee5665504496fefb03acd8510c41b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyVel</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a9052f21a2d371b7cceeca3ae9d7c5027</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyAcc</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a35a9b4e0d1a7d097f947005ae638e398</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointConf</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac3dec972fc9c0669fbb28e584c036f78</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad9ea39279af93f142550f8aea088a257</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointTorque</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac6f14bfe8a4062f836871f2a42149c28</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchMotionSubspace</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1327f38fc720ddfc67438a26b5d47a64</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchQ</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1f429d7788904c24634cb927b04b4dfc</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlpha</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a79207fb4bfe485b88f7cced51418f1fa</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlphaD</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a5a321010d59e162b9e53722eee7a97b3</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchForce</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7c0a3a499a70eddeb7eb992690ab4985</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiBodyGraph.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00371</filename>
    <includes id="a00320" name="Body.h" local="yes" imported="no">Body.h</includes>
    <includes id="a00359" name="Joint.h" local="yes" imported="no">Joint.h</includes>
    <class kind="class">rbd::MultiBodyGraph</class>
    <class kind="struct">rbd::MultiBodyGraph::Arc</class>
    <class kind="struct">rbd::MultiBodyGraph::Node</class>
    <namespace>rbd</namespace>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/RBDyn/RBDyn/</path>
    <filename>a00083</filename>
  </compound>
  <compound kind="file">
    <name>VisServo.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00374</filename>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a07491bc6c9c4efc66e979df49eec7a77</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const double depthEstimate, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3f883d5b2cb2d74f03f930d7097aa91e</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobianDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af911cb4aaa8f45c453f0eb8af449e402</anchor>
      <arglist>(const Eigen::Vector2d imagePoint, const Eigen::Vector2d imagePointSpeed, const double depth, const double depthDot, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>poseJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa7c485df3cfdbc0819e75bbea7cb2632</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, Eigen::Matrix&lt; double, 6, 6 &gt; &amp;jac, const double rot_angle_threshold=1.0e-8)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>depthDotJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a731b8c0b3d37872f0a22fd46d008e970</anchor>
      <arglist>(const Eigen::Vector2d imagePointSpeed, const double depthEstimate, Eigen::Matrix&lt; double, 1, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getAngleAxis</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a42e2c6560ae5a3978c5d999e5dfb9375</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, double &amp;rot_angle, Eigen::Vector3d &amp;rot_axis)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getSkewSym</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af84dc61728c402a7a3a5b61dc7b8a780</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector, Eigen::Matrix3d &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZMP.h</name>
    <path>/home/runner/work/RBDyn/RBDyn/src/RBDyn/</path>
    <filename>a00377</filename>
    <namespace>rbd</namespace>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCentroidalZMP</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a394e1cd05547fb851d8dbe8f0ddbbbe5</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPNoGravity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a29fb02f3699713bd952eac420794f673</anchor>
      <arglist>(Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPComplete</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>afeb4fb0f92e547a41ae4bd57b09febc7</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude, sva::ForceVecd wr_external, double mass)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rbd::MultiBodyGraph::Arc</name>
    <filename>a01019.html</filename>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a255894e301bfdb9e660bbb2b5a75fe7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a644383e1d0afd18757c6daa8a0fc7dd3</anchor>
      <arglist>(sva::PTransformd X0, const Joint &amp;j, bool forward, std::shared_ptr&lt; Node &gt; n)</arglist>
    </member>
    <member kind="variable">
      <type>sva::PTransformd</type>
      <name>X</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a7426487e03bd105101c6f4e266516eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Joint</type>
      <name>joint</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a94a56746ed672ba266fbfc69c54fd35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Node &gt;</type>
      <name>next</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a4cbf3737c0f8e4c941ee4198fbbd9ba5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rbd::Block</name>
    <filename>a00987.html</filename>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>ad655df495540f9830ce18c857a16194f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a72aad336bed307fedb69b4899c935cb5</anchor>
      <arglist>(Eigen::DenseIndex startDof, Eigen::DenseIndex startJac, Eigen::DenseIndex length)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::DenseIndex</type>
      <name>startDof</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a3558d01bb1176d7cf135ce8c43da0548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::DenseIndex</type>
      <name>startJac</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a0bcf0a267fe729a2bee80a4fd92acb2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::DenseIndex</type>
      <name>length</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a7ae0e545608e9ad0e0ef5b37bfca9b88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::Body</name>
    <filename>a00951.html</filename>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aa7930e0bb454b55c51742130eb366aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>ad36a7d8f47a4cf5fbbb8509a7ae9f8a2</anchor>
      <arglist>(const sva::RBInertiad &amp;rbInertia, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a355196d25893528939552c2ac2791f54</anchor>
      <arglist>(double mass, const Eigen::Vector3d &amp;com, const Eigen::Matrix3d &amp;inertia, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a9c914687006ac4781c9a8ade95904b64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::RBInertiad &amp;</type>
      <name>inertia</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>af15db2293baf0fb264c9284b9f4c5408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a81e168c4dd17e86f8655424f7498e6df</anchor>
      <arglist>(const Body &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a05debc2985f0f6efdeecfaff1cb4826e</anchor>
      <arglist>(const Body &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::CentroidalMomentumMatrix</name>
    <filename>a00999.html</filename>
    <member kind="function">
      <type></type>
      <name>CentroidalMomentumMatrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a6b55e44910a80fa9c05088fe5c77fb1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CentroidalMomentumMatrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a7ef581ba6472f63b0dadc3baf432dc2d</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CentroidalMomentumMatrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a3b491ce6fbfdc95443bf49d1e1f9b5ea</anchor>
      <arglist>(const MultiBody &amp;mb, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a0f8b409e01c66bf4f81cb11b67a6d3d2</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrixDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>af138f48312d885b9ee551859fec2fae5</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMatrixAndMatrixDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a7209519ce50bd70bd373c62186a0687e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>matrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a2cf1537f878328acc33a98e8ae425f68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>matrixDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a53c65afd5798ee503336df77c065c930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>momentum</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a28099ca77aaf3bddbac712abc5ede61d</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>normalMomentumDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a18f5451f5ad70e40032575100a965e57</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>normalMomentumDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a53b91b4c45565e273631c107ce590af0</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeMatrix</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>af9113c5576b12cd42c16d392e1b4c169</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeMatrixDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a2c6ea5e364ddd4ab3bf08ae4bbf4d20d</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeMatrixAndMatrixDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>acd362ff05788f15da61600d81194dc2f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sMomentum</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>a294e50a3d0c8ffcbd74104c489684f5f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com) const</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sNormalMomentumDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>ae45738dc7076e4cd66da6f6c01c373cd</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>sNormalMomentumDot</name>
      <anchorfile>a00999.html</anchorfile>
      <anchor>acf365504fcbd9b85e2ea6b9317107ecf</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::CoMJacobian</name>
    <filename>a00959.html</filename>
    <member kind="function">
      <type></type>
      <name>CoMJacobian</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a543e4288e57ea2e6447faeede53f53e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMJacobian</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a9305cb86c43d801605c8bcf0c9c2f869</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMJacobian</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a3ab190650e33591f3f6f67d04c9ae99e</anchor>
      <arglist>(const MultiBody &amp;mb, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInertialParameters</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a4e4431e0895e22ea51a8a24f5031c4d7</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>weight</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a0b1b5f524bc856389d322bde950d2898</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>weight</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a482eb7f57174cb499efd874a073a0770</anchor>
      <arglist>(const MultiBody &amp;mb, std::vector&lt; double &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a5e4f4e1e52da2f12f818a1000482f6f4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobianDot</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a8f3c078468975cb8c4c57e8336c6ea00</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>velocity</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>ab528540ac4411e6878da1919688de205</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>normalAcceleration</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>ad0da302e0ecf70b1770690d166801ffd</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>normalAcceleration</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>ad425acfe77e032a3cd84775b8421f277</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sUpdateInertialParameters</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>abe439888b900a65bd9428739145f6dc7</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sWeight</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a00330c3ae72ae2df68b3ea098f7deb63</anchor>
      <arglist>(const MultiBody &amp;mb, std::vector&lt; double &gt; w)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobian</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>aba20997d6eb51888b0865300bfbe2016</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobianDot</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>aa4aad39a862fc8756f4f6eae4b10e89f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sVelocity</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a9ed7ffce02261b5e687e85788ae04d65</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a781f23432221a1eb3a3b617aa94e14bc</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>af7d32ec468b99c82337cb57c50dab297</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::CoMJacobianDummy</name>
    <filename>a00955.html</filename>
    <member kind="function">
      <type></type>
      <name>CoMJacobianDummy</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>ababbc4a3f04802ad1d0287a8e2d47b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMJacobianDummy</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a554c25fd879b9e58e177a705df4a9755</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoMJacobianDummy</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>aa4d5197c3891864b65833d93b089f38b</anchor>
      <arglist>(const MultiBody &amp;mb, std::vector&lt; double &gt; weight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoMJacobianDummy</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a3037b95f71681a718f6d00e504e5bf80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a25c51ef15038a476e629d51c2a7fbff1</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobianDot</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a4707fb88d4a83ea98107e8fee0e3ce34</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobian</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>ac3ce8eac765164e19b299ce0035a2991</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobianDot</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a0c7ed35a07cbeae6048181a6f594c881</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::ConfigConverter</name>
    <filename>a01011.html</filename>
    <member kind="function">
      <type></type>
      <name>ConfigConverter</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a59d66903b85b36a6ae94a68e7f2df0d6</anchor>
      <arglist>(const MultiBody &amp;from, const MultiBody &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>acebb8d9e8de53df4aa29d04ee0539ac9</anchor>
      <arglist>(const MultiBodyConfig &amp;from, MultiBodyConfig &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertJoint</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a8f4e11dbb17bf4533d4a8405def878c8</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;from, std::vector&lt; T &gt; &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>convertJoint</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a99b20586b567ae35c46284d1126e7df1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;from) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sConvert</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a3a7ee08f163490c0aa910e94ae181ea5</anchor>
      <arglist>(const MultiBodyConfig &amp;from, MultiBodyConfig &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sConvertJoint</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>ad53bb7d337f8a954fe1912ad8c6661cc</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;from, std::vector&lt; T &gt; &amp;to) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigConverter *</type>
      <name>sConstructor</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a0836ef089bb5523266da79bc9a8650ec</anchor>
      <arglist>(const MultiBody &amp;from, const MultiBody &amp;to)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::Coriolis</name>
    <filename>a00963.html</filename>
    <member kind="function">
      <type></type>
      <name>Coriolis</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a348f175e288bb3557d9757e8f55d6128</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>coriolis</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a686bade8cef9c1016aee0a794a3c04ab</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::ForwardDynamics</name>
    <filename>a00967.html</filename>
    <member kind="function">
      <type></type>
      <name>ForwardDynamics</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ae259468b4893dec148ecc09b9e4a1b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForwardDynamics</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>aa22bfb5dd27b0397ae8346562e4c24f8</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardDynamics</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>aa530cfcbe7f084f80cba29a038e080f1</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeH</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a19956574f9a161a0aa99d686f5b0894b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeC</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a6a5e452fdaf1b01afacccc972bc86190</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>H</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a8158043c6d74e3e1090c919e99e2c58f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>aded507185805dbc5ab5068269b1f8df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::RBInertiad &gt; &amp;</type>
      <name>inertiaSubTree</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ab2d2dd97bc971871a50f374dd81c1c52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sForwardDynamics</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ac193710e027bab0b48628722f1e7f3c6</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeH</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a0d768ea2d4bfcb0350fe1a51aa7fc333</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeC</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>af635bf7af87c786733b52f809aa71ce4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::IDIM</name>
    <filename>a00975.html</filename>
    <member kind="function">
      <type></type>
      <name>IDIM</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>abb151fcfc055baf22e2a978a1a0d4681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IDIM</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a4dc06152129e65ddaa7cd509d5cd343f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeY</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a831222dc88e7589ff614ecb4d47ac723</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>Y</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>aa99e315c9da1c0ef6da65e226dfd24cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sComputeY</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a069ddd75223494e75f3815fe765df97f</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const rbd::MultiBodyConfig &amp;mbc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::InverseDynamics</name>
    <filename>a00971.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseDynamics</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a8a1cfa3c30e35f6443eb63da1b66a35c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseDynamics</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a95d57fb181a5c0a2cab373a2fc1c2484</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseDynamics</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a476dbc1b84043b1ef2cfdc2d47280717</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseDynamicsNoInertia</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a62e3cd0efc54c727b5fe1e359e5ae9b9</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sInverseDynamics</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a46dcfb8735a7b54039d3190f3c653a35</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sInverseDynamicsNoInertia</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a5bbe44b1f97842fa07e38eef4cac83eb</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::ForceVecd &gt; &amp;</type>
      <name>f</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a38cfd1e2c9a504ca3c233dd2a6e6fff1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::InverseKinematics</name>
    <filename>a00979.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseKinematics</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>ad8ac966b9ece34c3a3c95daf842084cc</anchor>
      <arglist>(const MultiBody &amp;mb, int ef_index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inverseKinematics</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>ae3899d5b6efbaef606567ebf52c2897a</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;ef_target)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sInverseKinematics</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a007d635fbd464139be26fa9470ee81bd</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;ef_target)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_iterations_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a53a472b37454cffbd7c314560ddcdd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambda_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>affe230038bdcbfda74a9456a7297373c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>threshold_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>afdf3d123b3a62e3032763711296fe6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>almost_zero_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a6bedb6a014d460dd706e66e3fb199783</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::InverseStatics</name>
    <filename>a00983.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseStatics</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>aaf3896d15a495df0c162c668dc5dc507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseStatics</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a134bc6e9c98b27f21266d9a5b76c4a00</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJacobianSize</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a56d3f56ae688f856da20432bbffacbe1</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; Eigen::MatrixXd &gt; &amp;jacMomentsAndForces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseStatics</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a789b578b71c9f48056dd5212ccdb5b7d</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTorqueJacobianJoint</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>ac2da619470e90328c9cba100cda5d9ef</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const std::vector&lt; Eigen::MatrixXd &gt; &amp;jacMomentsAndForces)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTorqueJacobianJoint</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a4d1c30fe449fb3df55f5e3fce04514cb</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sInverseStatics</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a3ca5175516c017b4dccd7dd2740ec435</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::ForceVecd &gt; &amp;</type>
      <name>f</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a2f3288fa574e589fc3f2a4c70d227a91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Eigen::MatrixXd &gt; &amp;</type>
      <name>jointTorqueDiff</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a740673d3cb11b3484d4f33f319bf039a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::Jacobian</name>
    <filename>a00991.html</filename>
    <member kind="function">
      <type></type>
      <name>Jacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>af526061a2e8657d100637ee84249d7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Jacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a505a02fa2ac61ecad2ab39755901ccb3</anchor>
      <arglist>(const MultiBody &amp;mb, const std::string &amp;bodyName, const Eigen::Vector3d &amp;point=Eigen::Vector3d::Zero())</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>abba109aec7645809fc5a1b4e54361a50</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_0_p)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a2417e9496d9bcb449070d1c70b6837ca</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>bodyJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a9ab4606c9e58d102e68015ccb2c768a8</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>vectorJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a20dd50b529f11d23467aca84cd28f0c7</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>vectorBodyJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a0d3308ac8f2e127cc6c6fd93c7454924</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobianDot</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a5318dd2fbbacb52f4cced639da50582b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>bodyJacobianDot</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ae6b17e17e474a5bf00cec19c8a5feb60</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>velocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>aac82c13dc74e8e3dcfd5b13248f3d160</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>velocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>adc2a577b8e0ff766da362c0a6dda844b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>bodyVelocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>aa9788ed60fbd5f49783142c2e68ad12d</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>normalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ae93c6b2935bb1f3b439c0a65a5b9f6f4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_b_p, const sva::MotionVecd &amp;V_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>normalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a8fd453cc38d4fb58af1990f35abda347</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>bodyNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a650e1c1a9fc5d6e036cab59a40989adb</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>normalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ab7e4dbecb617039eb8e09bf85745b15e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB, const sva::PTransformd &amp;X_b_p, const sva::MotionVecd &amp;V_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>normalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ab23b1165bd5b3fb19082281c0d650847</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>bodyNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a2c7ffe3ecb96ff9d9f988d44e0ad1484</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a8bba1bc1bf8dcb2b49e7a9f6e7f25399</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;point, Eigen::MatrixXd &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateBodyJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a01955d0a6b1f70ead90aa5b1ae4bf452</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;point, Eigen::MatrixXd &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fullJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a6ac646766e33dd29445d34b734e324d5</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFullJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>aaec2f493ca77e71452df775b5926c7d4</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFullJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ad011e6e4253b18dab261e5f338d8a9bb</anchor>
      <arglist>(const Blocks &amp;compactPath, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>expand</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ae2df75698f63169e81c9548ec8602578</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandAdd</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a5263ca76dbdba24f06a8b85c53dbff83</anchor>
      <arglist>(const rbd::MultiBody &amp;mb, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>Blocks</type>
      <name>compactPath</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a62b1d0db7c03baf078b2813a1c972671</anchor>
      <arglist>(const rbd::MultiBody &amp;mb) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandAdd</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ac5fce3d0256f216428bb9d46d3448d0f</anchor>
      <arglist>(const Blocks &amp;compactPath, const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>MultiBody</type>
      <name>subMultiBody</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a8f0662573c2b6079e8b702da115a4842</anchor>
      <arglist>(const MultiBody &amp;mb) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>jointsPath</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a8ac14b75a06b6e1bdb903fdde7ecddf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dof</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>aad4fa59f43ace5ebeb0b2227e5cb86d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>point</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a337b2b64fb240946ff5174137d87cb6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>point</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a95d0a2f2301bcd5c5f5c1b47647c6ff5</anchor>
      <arglist>(const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ac6a663e740335a4c0d68e025e0ac5cdc</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_0_p)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a22492f7707bc6bcd3ac2fdb1799b5b8a</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sBodyJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a17c99a6c1fc4c1e1abd901bca7e4e403</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sVectorJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a46622bd3bf3709a545de3fb338715156</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sVectorBodyJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a12fe24d4d2dd0f4ea54003555f7be082</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>MultiBody</type>
      <name>sSubMultiBody</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a5384b8a1626874d8e0776fa6b2a6cc3e</anchor>
      <arglist>(const MultiBody &amp;mb) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sJacobianDot</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a69b7e18ecd1b0157163f2fe8727cfd11</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>sBodyJacobianDot</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>abb3dc958dd0f3293bbe4a6f17b10e1e6</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sTranslateJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a2c44a58e749f3e31e01a7b768ba7a6b9</anchor>
      <arglist>(const Eigen::MatrixXd &amp;jac, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;point, Eigen::MatrixXd &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sFullJacobian</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ad68687c621fc0bc5137d6cf929bf83f1</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::MatrixXd &amp;jac, Eigen::MatrixXd &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sVelocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>abe639518ab7d26218d9f11765655b53a</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sVelocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>ab867134c652a2d2950f99851222fcb1b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a6deacdb78badba4b849f68c4ef621d83</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const sva::PTransformd &amp;X_b_p, const sva::MotionVecd &amp;V_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a141d56a08497a8895a789c5a11bff6c6</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB, const sva::PTransformd &amp;X_b_p, const sva::MotionVecd &amp;V_b_p) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a0c717107197f055dbd329b77746a6ca4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sBodyVelocity</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a6715a7ae9ef65dd04833aa9728ec01e2</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sBodyNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>aba5cce10884822056a154e0f6fd19eb8</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a6980043072a4d75f7685dda0a47ee61d</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sBodyNormalAcceleration</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a7081298e9bc5b4aaf19f3f9e5abff559</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const std::vector&lt; sva::MotionVecd &gt; &amp;normalAccB) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::Joint</name>
    <filename>a00995.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rev</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdac5b8dc11c03ee56b4eab11623556d65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Prism</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda6ab8434106bd98660ed6d2a2ea5db39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Spherical</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdaa31ab123b6ffb5cf64a125699deb427c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Planar</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdac2828adb78c3ca3bd54403ac28146b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cylindrical</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda1e7a8957f1a32f5d526684f9f5c598fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Free</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdab6d9c54c25c59aa44ef674c5b58be044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fixed</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda81b78f2a5f37470430e975ed9436ce1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OldType</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevX</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a27319663df173fa147a2d271e0ef355f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevY</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a3686aba670ebb2c1a6a3b789114884bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevZ</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a432be99df9b9483bee433d8d9f948cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismX</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a8dd925b3afb50905fc0c3d4f79ffb7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismY</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a260534d401ae5149cf89643e963697af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismZ</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536aa4977f4e65cd2d481b4c3081de7a3c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rev</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdac5b8dc11c03ee56b4eab11623556d65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Prism</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda6ab8434106bd98660ed6d2a2ea5db39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Spherical</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdaa31ab123b6ffb5cf64a125699deb427c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Planar</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdac2828adb78c3ca3bd54403ac28146b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cylindrical</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda1e7a8957f1a32f5d526684f9f5c598fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Free</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fdab6d9c54c25c59aa44ef674c5b58be044</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fixed</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afff99e26b5eeb3d899af433df385f4fda81b78f2a5f37470430e975ed9436ce1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevX</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a27319663df173fa147a2d271e0ef355f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevY</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a3686aba670ebb2c1a6a3b789114884bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RevZ</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a432be99df9b9483bee433d8d9f948cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismX</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a8dd925b3afb50905fc0c3d4f79ffb7da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismY</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536a260534d401ae5149cf89643e963697af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PrismZ</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab948ec84d396e27779015bccdf303536aa4977f4e65cd2d481b4c3081de7a3c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a850ef074a8cef78c6a445ed829ed8bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>aa67c605cda8ec6377bd05319c641e47e</anchor>
      <arglist>(OldType type, bool forward, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a4d6f669123be6cb78d28963739c59044</anchor>
      <arglist>(Type type, const Eigen::Vector3d &amp;axis, bool forward, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a9a6b428b8aca7c270a2f62a298adaf1e</anchor>
      <arglist>(Type type, bool forward, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a889bc8993d4ecd8322353a167a4c5a74</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMimic</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a08aad92ddc12b89bf2e1fb29557ee53f</anchor>
      <arglist>(const std::string &amp;name, double multiplier, double offset)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>adcb6884d99bbd90f945050fed9d7ede5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>direction</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a4d6fc0169734d58a5dd6c5aa48b9ab6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forward</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab83eff95cf9a6f76ffdcb8a0ab9f2b88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>af33b8b84e50e1a9d0e1859cd509e3afa</anchor>
      <arglist>(bool forward)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>params</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ad5328566a81dc13d2f919262714e195a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dof</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a43cdf3d3ef2f3d8a7c88a90d0c5ba2ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afbfa5cd07f7b634caf9b51fcf0dc26bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMimic</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ac07aa4802c1518da095d129517579606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>mimicName</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ae3c30df62f2f79358b77a0a3e02f2ba8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mimicMultiplier</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a102a48dfd239b3765c1b1162845c30ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mimicOffset</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a7e37f08b25dbd4f0615757471eeead00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; double, 6, Eigen::Dynamic &gt; &amp;</type>
      <name>motionSubspace</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a814a490598940a5333e50f3600da6103</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransform&lt; T &gt;</type>
      <name>pose</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>aa32392fa85a8c5367f24d6b00392d257</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>motion</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>aa615dc606b10fe97bb44f4816a5cd417</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;alpha) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>tanAccel</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a795bc4abe7295b7132fcf09af1af4561</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;alphaD) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>zeroParam</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ac8d2e2679489b4c20011a15251126523</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>zeroDof</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ac3581710d443aaf318ba620c5252a96f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sva::PTransformd</type>
      <name>sPose</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ac5d31face6e08f16e892e1ed37a63442</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sMotion</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a93ea92159c78844a042957ab3d465612</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;alpha) const</arglist>
    </member>
    <member kind="function">
      <type>sva::MotionVecd</type>
      <name>sTanAccel</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>acae2455f6d01a0e10dec1ee03d295d06</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;alphaD) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a12fc0e6f358c45f15bc218c8c77af1d2</anchor>
      <arglist>(const Joint &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a4a28d69933cbf4a7f598f6c0aad8a318</anchor>
      <arglist>(const Joint &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>ZeroParam</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a73c50449329d34fdedaeb0684cf6b45e</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>ZeroDof</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a81bbf2ec038ee24dec892858c36263d4</anchor>
      <arglist>(Type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::MultiBody</name>
    <filename>a01003.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiBody</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a04ea02cfae6c4c581b57201974dfe89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiBody</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a433dd52535b93f26189349ee9b483ed2</anchor>
      <arglist>(std::vector&lt; Body &gt; bodies, std::vector&lt; Joint &gt; joints, std::vector&lt; int &gt; pred, std::vector&lt; int &gt; succ, std::vector&lt; int &gt; parent, std::vector&lt; sva::PTransformd &gt; Xt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrBodies</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ab419ac71e7e1801d406df89ca2174a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrJoints</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ae45f8223b7f225e699e9a091a1d2f859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Body &gt; &amp;</type>
      <name>bodies</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a11c8909737502423642f67ff6ba2dfd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bodies</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a3374d2c673adf3410c20d0dae9fd1622</anchor>
      <arglist>(std::vector&lt; Body &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>body</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ae184ad265d5423190535c390a2f57bab</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>body</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a909b06a783ea5a31ff325c32116c2bab</anchor>
      <arglist>(int num, const Body &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Joint &gt; &amp;</type>
      <name>joints</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ac64a87bba28257cd8dc97182b5872f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>joint</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a7119d38f22799e666a41d877220cd3c2</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>predecessors</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a46a8f576d147c526338897d983a276bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>predecessor</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a199d71d7e3af002fec8809856c7e2350</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>successors</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a1d19eda17b1475a42c61bf752c962671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>successor</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a71ab014e06ab1915bddb2c787cc61036</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>parents</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a170359392ccef8f3d95cc1444f341975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parent</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a4ebce38393da8b30ec6aa80b90989c4d</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>transforms</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a63f65ba32c2ba589b1a0029169765fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transforms</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ac01c18ac025379ba41a086f6306ef82f</anchor>
      <arglist>(std::vector&lt; sva::PTransformd &gt; Xt)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>transform</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a372902e74164aa867a0ea4648ff0f4d1</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a5b7f4cb9987fe80973fe7b99bde82c6a</anchor>
      <arglist>(int num, const sva::PTransformd &amp;Xt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bodyIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ad056d159e279848c62eee405d1610e69</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a825dd4731bb036de0fc7b94e0a75da14</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, int &gt; &amp;</type>
      <name>bodyIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a71ecd442b7af26f8d5096a584d89f6e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; std::string, int &gt; &amp;</type>
      <name>jointIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>abf19db27486757df2cbf7869e7e84a89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointPosInParam</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a6e105187f6cd00cd6f028a4aa9fc1e7d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jointPosInDof</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a14a15c3aca901569e5f2d57ab793930f</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>jointsPosInParam</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a7c50452dad5b9e0d5941264d0a590fa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>jointsPosInDof</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a402ae0f7b3ead751a50aadd39e150c23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrParams</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a110467a196e992eba85413472dd8e461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrDof</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>aaaaddfba44611ef4a19a090888b229e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sBodies</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>aa1c373e3a1165f4471e357f38fe17ec7</anchor>
      <arglist>(std::vector&lt; Body &gt; b)</arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>sBody</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a16384d2d590d0582c879af2f44ac4f89</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sBody</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a6b156c48e18a777a01dd506b304cdb5f</anchor>
      <arglist>(int num, const Body &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>sJoint</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a451697157f6c01313633f0875a10f771</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sPredecessor</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a223f868f58b0e07a397ad844fcbd282a</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sSuccessor</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a02fe7ef5eb97586d5939a069ad745d23</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sParent</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>adba5aec8ae3eaf7a274b9cf426272b85</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sTransforms</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a6efc8849b1e01430d691a01ec50a20f7</anchor>
      <arglist>(std::vector&lt; sva::PTransformd &gt; Xt)</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>sTransform</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a33457a1452923a80fa8dac7d35721631</anchor>
      <arglist>(int num) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sTransform</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>afb629c8d33adbdcef7e32ccd19b2b653</anchor>
      <arglist>(int num, const sva::PTransformd &amp;Xt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sJointPosInParam</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ab79bda243de97b29b57247af717e0bea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sJointPosInDof</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a5e1ea2b468534b2459e4e26faff6601a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sBodyIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ada6ca0f104ae28ea573baef6735d7f7b</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sJointIndexByName</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>adbe11c392e7a6d4923431afcea20dec0</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Body &gt;</type>
      <name>bodies_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>abbea0b9458d4a5bfc17d1821882e78f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Joint &gt;</type>
      <name>joints_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ad61fc07b99a055a49c5ba40435385d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>pred_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a618178f0fe860b33c9fa49c515a1fd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>succ_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a70ad42de3e7c355743d7564e4afdd75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>parent_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a5a77f6cf7db7dba3b41c47aa71f9758a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>Xt_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a03ce12a0f6750122cc20c89421460938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, int &gt;</type>
      <name>bodyNameToInd_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>afa2c9103dc0cf11ac2812ffdf63ec738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; std::string, int &gt;</type>
      <name>jointNameToInd_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>acec6b8cf62e7eccb89057ce2172ca5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>jointPosInParam_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>af3e8e697ccb4d4db7a98814cb0ab9fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>jointPosInDof_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>ad43385c30d7e2027bbaba0856849e275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrParams_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>aa2dced12bbf8276ad49415bcd8977f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nrDof_</name>
      <anchorfile>a01003.html</anchorfile>
      <anchor>a358cf0709caa5f3e0d535a8194b3c3c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rbd::MultiBodyConfig</name>
    <filename>a01007.html</filename>
    <member kind="function">
      <type></type>
      <name>MultiBodyConfig</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a524d7ab0980a09364988ad58c7ca04a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiBodyConfig</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>abae6ecac918249c2f22c6215a1dedaca</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zero</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a14f36698c3a42fa9f3ae6e95aa4833cc</anchor>
      <arglist>(const MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Eigen::MatrixXd &gt;</type>
      <name>python_motionSubspace</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a177773b30e2d2182b51aeb977952a8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>python_motionSubspace</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a568671e1c89da6df6421e9feeeacb2ca</anchor>
      <arglist>(const std::vector&lt; Eigen::MatrixXd &gt; &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>q</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>aa5bc9b892c357f9c59b378a3bc17b335</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>alpha</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>ad76e857df948af50e5fa145d246c12da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>alphaD</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a3cb9e1fc41bb794d465099f605800689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::ForceVecd &gt;</type>
      <name>force</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>ad66203eb0d1267c14869d6fc409164db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>jointConfig</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a3e4c0a9cab659e103634c1f07615cfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::MotionVecd &gt;</type>
      <name>jointVelocity</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>ae0df16b70c9adb10e23225d76a3a8b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>jointTorque</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a7cc337a5ddf91f11bd613ceda5c10d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Matrix&lt; double, 6, Eigen::Dynamic &gt; &gt;</type>
      <name>motionSubspace</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a62a72602dc947c75023418e43e6ef258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>bodyPosW</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a68f5498dbe584cc07ca833501688a6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::PTransformd &gt;</type>
      <name>parentToSon</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a588c8309725aebc66868265cc2b5aa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::MotionVecd &gt;</type>
      <name>bodyVelW</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a278db7240fb454ea06bd3dce78a18da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::MotionVecd &gt;</type>
      <name>bodyVelB</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a7f8b9fcb9804bf87505c65a0d6e17785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; sva::MotionVecd &gt;</type>
      <name>bodyAccB</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a25fc059a35f32434f2743f91f78c06bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a0f275f9fe70453bfd32a67b113850e3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>rbd::MultiBodyGraph</name>
    <filename>a01015.html</filename>
    <class kind="struct">rbd::MultiBodyGraph::Arc</class>
    <class kind="struct">rbd::MultiBodyGraph::Node</class>
    <member kind="function">
      <type></type>
      <name>MultiBodyGraph</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>acbd45f584b6e2ebcbd70bb9a50d65252</anchor>
      <arglist>(const std::string rootName=&quot;Root&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiBodyGraph</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a12abedeaa7ade161a3f85cd564a9edef</anchor>
      <arglist>(const MultiBodyGraph &amp;mbg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiBodyGraph</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a91417edd9e1dea7780942ba938c942d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MultiBodyGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a1815789e38b06dc3c53349b90f59cd39</anchor>
      <arglist>(const MultiBodyGraph &amp;mbg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>ae5c7d148256138e30c9477a08643651c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBody</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a6c3c7fa80770ae6d0eea6f4f0a294f03</anchor>
      <arglist>(const Body &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJoint</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a9ea2e5e03771bf756df8c049e45f6aa4</anchor>
      <arglist>(const Joint &amp;J)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linkBodies</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>aac7bf70b53581fe955e86c6e4e975b51</anchor>
      <arglist>(const std::string &amp;b1Name, const sva::PTransformd &amp;tB1, const std::string &amp;b2Name, const sva::PTransformd &amp;tB2, const std::string &amp;jointName, bool isB1toB2=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; Node &gt;</type>
      <name>nodeByName</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a161214c01b5c4bddb957b0ec16248107</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; Joint &gt;</type>
      <name>jointByName</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a0a11ccb56521189c363c76deafb11351</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrNodes</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>aa5bff9ddeae50743e7a72002971179a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>nrJoints</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>ac566ff3b5fce861b20d6864bb635e880</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MultiBody</type>
      <name>makeMultiBody</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a0b609d5bef110eff5e418222b99daa14</anchor>
      <arglist>(const std::string &amp;rootBodyName, bool isFixed, const sva::PTransformd &amp;X_0_j0=sva::PTransformd::Identity(), const sva::PTransformd &amp;X_b0_j0=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>MultiBody</type>
      <name>makeMultiBody</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a53753c50aecde8267783c1c7380b84e3</anchor>
      <arglist>(const std::string &amp;rootBodyName, Joint::Type rootJointType, const sva::PTransformd &amp;X_0_j0=sva::PTransformd::Identity(), const sva::PTransformd &amp;X_b0_j0=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>MultiBody</type>
      <name>makeMultiBody</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>aee451c3b6806f21bf44b9103c3498155</anchor>
      <arglist>(const std::string &amp;rootBodyName, Joint::Type rootJointType, const Eigen::Vector3d &amp;axis, const sva::PTransformd &amp;X_0_j0=sva::PTransformd::Identity(), const sva::PTransformd &amp;X_b0_j0=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeJoint</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a9de7906c304ab726487e7ef158d81264</anchor>
      <arglist>(const std::string &amp;rootBodyName, const std::string &amp;jointName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeJoints</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>adc767caefca5cb2edb685f4875069f54</anchor>
      <arglist>(const std::string &amp;rootBodyName, const std::vector&lt; std::string &gt; &amp;joints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeSubBodies</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a6c2f62094dc38b89089d09b5c4d4a367</anchor>
      <arglist>(const std::string &amp;rootBodyName, const std::string &amp;jointName, const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;jointPosByName)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, sva::PTransformd &gt;</type>
      <name>bodiesBaseTransform</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>aa729e4ff4fbb54e6c0fcf92cfda602ff</anchor>
      <arglist>(const std::string &amp;rootBodyName, const sva::PTransformd &amp;X_b0_j0=sva::PTransformd::Identity())</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
      <name>successorJoints</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a04cbebadb99bc2317885d5eebb4ab4ba</anchor>
      <arglist>(const std::string &amp;rootBodyName)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>predecessorJoint</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a94dab17b5dab5f94f4908214f5fd128a</anchor>
      <arglist>(const std::string &amp;rootBodyName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MultiBodyGraph</type>
      <name>fixJoints</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>ada847ed79657eb31d8aede8889751f24</anchor>
      <arglist>(const MultiBodyGraph &amp;other, const std::vector&lt; std::string &gt; &amp;jointsToFix, bool fixAllJoints=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>rootJointName_</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a80b027812459d999809baa10eae13236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Node &gt; &gt;</type>
      <name>nodes_</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>ad03d9d454d4a46c312b610c9e11d0989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Joint &gt; &gt;</type>
      <name>joints_</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>a7c2fe9d7bc29f6489b24f4a12049eee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::shared_ptr&lt; Node &gt; &gt;</type>
      <name>bodyNameToNode_</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>ad799fa0fa418547b6bb64ae2a5f3eb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::shared_ptr&lt; Joint &gt; &gt;</type>
      <name>jointNameToJoint_</name>
      <anchorfile>a01015.html</anchorfile>
      <anchor>abf0d910d1082456320792a7008b368a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rbd::MultiBodyGraph::Node</name>
    <filename>a01023.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>ade9757164a88994b4fedf2af4c33e089</anchor>
      <arglist>(const Body &amp;b)</arglist>
    </member>
    <member kind="variable">
      <type>Body</type>
      <name>body</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>aea931fe8a425c0795911395cd09071b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Arc &gt;</type>
      <name>arcs</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>aacec197bdf6de9edf6de089253ffb583</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rbd</name>
    <filename>a00381.html</filename>
    <namespace>rbd::ik</namespace>
    <class kind="struct">rbd::Block</class>
    <class kind="class">rbd::Body</class>
    <class kind="class">rbd::CentroidalMomentumMatrix</class>
    <class kind="class">rbd::CoMJacobian</class>
    <class kind="class">rbd::CoMJacobianDummy</class>
    <class kind="class">rbd::ConfigConverter</class>
    <class kind="class">rbd::Coriolis</class>
    <class kind="class">rbd::ForwardDynamics</class>
    <class kind="class">rbd::IDIM</class>
    <class kind="class">rbd::InverseDynamics</class>
    <class kind="class">rbd::InverseKinematics</class>
    <class kind="class">rbd::InverseStatics</class>
    <class kind="class">rbd::Jacobian</class>
    <class kind="class">rbd::Joint</class>
    <class kind="class">rbd::MultiBody</class>
    <class kind="struct">rbd::MultiBodyConfig</class>
    <class kind="class">rbd::MultiBodyGraph</class>
    <member kind="typedef">
      <type>std::vector&lt; Block &gt;</type>
      <name>Blocks</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>addcc00b58bd78ec27ff56ad979f5ff2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aef3e2f68a8f7a4ce79266e72ddaabb5e</anchor>
      <arglist>(std::ostream &amp;out, const Body &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoM</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa3d5affc22a2a8da050bec954dbe49e7</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aae7a9a01b7d8e8f0113ac0ced2f3359f</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCoMAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a66536ad8e1924b87c9b376d151f7321e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoM</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1dce1b30151f67949e67f9da9b248960</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a546da91f76a26766fe29b6269f4b6eaf</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>sComputeCoMAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a36f0a66ff371f16920fa8451d48e3014</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerJointIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3bd2d0d6d7e28cb91bf1d4595c170eed</anchor>
      <arglist>(Joint::Type type, const std::vector&lt; double &gt; &amp;alpha, const std::vector&lt; double &gt; &amp;alphaD, double step, std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>eulerIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af1d5e428f8fea58734485e214420ad45</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sEulerIntegration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>abd0e7a890bf8ed1ba9790c65f2b172c2</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, double step)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7cabedab4efa117bdc2f511c1277899a</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardAcceleration</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a24c441619953f5394c7053ccf75714ba</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc, const sva::MotionVecd &amp;A_0=sva::MotionVecd(Eigen::Vector6d::Zero()))</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardKinematics</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a96c3cea742bc063bc8cac29d42411ac9</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardKinematics</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a11ae46b6402eb8d74f53677aca71babb</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>forwardVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a45a97f5d7650231c3d723a11c9408cd8</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sForwardVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a6fdbf73c467ae855e5aadcc0589b55ab</anchor>
      <arglist>(const MultiBody &amp;mb, MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 6, 10 &gt;</type>
      <name>IMPhi</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a866fa89d4831928b912c77db84f30309</anchor>
      <arglist>(const sva::MotionVecd &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Matrix&lt; double, 10, 1 &gt;</type>
      <name>inertiaToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a6269a1cc3506d5512fbd8ec28fcedb84</anchor>
      <arglist>(const sva::RBInertiad &amp;rbi)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>vectorToInertia</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ab336ae166080460a4b1eedce786f3fc3</anchor>
      <arglist>(const Eigen::Matrix&lt; double, 10, 1 &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::RBInertiad</type>
      <name>sVectorToInertia</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a002a80a20c11b6e84b9dfc200412346b</anchor>
      <arglist>(const Eigen::VectorXd &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>multiBodyToInertialVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a0a9fb61b32a276321b743b72aa27fbbf</anchor>
      <arglist>(const rbd::MultiBody &amp;mb)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3&lt; T &gt;</type>
      <name>QuatToE</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7d00127b1f623476b945e05e88eb95d6</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac3088586b9fe6169533319c4dba20e9f</anchor>
      <arglist>(std::ostream &amp;out, const Joint &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentum</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af952b30ce2254dab6cebbe22e95baa9c</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>computeCentroidalMomentumDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a8988ff9653a5fc0595dabd3938622b37</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentum</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a917e5b58d319f5b36753ea5e158b60b4</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI sva::ForceVecd</type>
      <name>sComputeCentroidalMomentumDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>afe9772d66d45b249d91b081492dddc5e</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc, const Eigen::Vector3d &amp;com, const Eigen::Vector3d &amp;comDot)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>paramToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4bf39e343eab5ea745b6b5ad06e1322c</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sParamToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa230afce88a5b03f4cdb24bbe5697709</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v, Eigen::Ref&lt; Eigen::VectorXd &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>paramToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4e97ed59ef038e4668d094c149f4dbf4</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sParamToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4553c85e948490a728217442f42017a5</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>dofToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a35ba4e7bcaf28864ee5b873aa2f7ad98</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::VectorXd</type>
      <name>sDofToVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a40551e81dcb5a17dc51f28e51df91ab7</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>vectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ae1506b1cecfe2dc93145cdee35024021</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>sVectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa53030956d0aaa3b8f8573f876551cdf</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;e, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad81da92788d049e1111ea95aad747d9a</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToParam</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a9a12e59958ebc1de682cb558002236fa</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vectorToDof</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4e26c3bab795feca51d727beb784cf13</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>sVectorToDof</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aac7e53f4e1a1bf92a34842130f017325</anchor>
      <arglist>(const MultiBody &amp;mb, const Eigen::VectorXd &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchBodiesVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a962a1e605f4f3936684e8a18c30e10c6</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkMatchJointsVector</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4a2ee0f62601c711eeeedd9b38191c8c</anchor>
      <arglist>(const MultiBody &amp;mb, const std::vector&lt; T &gt; &amp;vec, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyPos</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ab3ad6457f66a076b7e3743ba5883d774</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchParentToSon</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac65ee5665504496fefb03acd8510c41b</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyVel</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a9052f21a2d371b7cceeca3ae9d7c5027</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchBodyAcc</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a35a9b4e0d1a7d097f947005ae638e398</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointConf</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac3dec972fc9c0669fbb28e584c036f78</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointVelocity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad9ea39279af93f142550f8aea088a257</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchJointTorque</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ac6f14bfe8a4062f836871f2a42149c28</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchMotionSubspace</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1327f38fc720ddfc67438a26b5d47a64</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchQ</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1f429d7788904c24634cb927b04b4dfc</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlpha</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a79207fb4bfe485b88f7cced51418f1fa</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchAlphaD</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a5a321010d59e162b9e53722eee7a97b3</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>checkMatchForce</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a7c0a3a499a70eddeb7eb992690ab4985</anchor>
      <arglist>(const MultiBody &amp;mb, const MultiBodyConfig &amp;mbc)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a07491bc6c9c4efc66e979df49eec7a77</anchor>
      <arglist>(const Eigen::Vector2d &amp;point2d, const double depthEstimate, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a3f883d5b2cb2d74f03f930d7097aa91e</anchor>
      <arglist>(const Eigen::Vector3d &amp;point3d, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>imagePointJacobianDot</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af911cb4aaa8f45c453f0eb8af449e402</anchor>
      <arglist>(const Eigen::Vector2d imagePoint, const Eigen::Vector2d imagePointSpeed, const double depth, const double depthDot, Eigen::Matrix&lt; double, 2, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>poseJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aa7c485df3cfdbc0819e75bbea7cb2632</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, Eigen::Matrix&lt; double, 6, 6 &gt; &amp;jac, const double rot_angle_threshold=1.0e-8)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>depthDotJacobian</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a731b8c0b3d37872f0a22fd46d008e970</anchor>
      <arglist>(const Eigen::Vector2d imagePointSpeed, const double depthEstimate, Eigen::Matrix&lt; double, 1, 6 &gt; &amp;jac)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getAngleAxis</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a42e2c6560ae5a3978c5d999e5dfb9375</anchor>
      <arglist>(const Eigen::Matrix3d &amp;rotation, double &amp;rot_angle, Eigen::Vector3d &amp;rot_axis)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI void</type>
      <name>getSkewSym</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>af84dc61728c402a7a3a5b61dc7b8a780</anchor>
      <arglist>(const Eigen::Vector3d &amp;vector, Eigen::Matrix3d &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>RBDYN_DLLAPI Eigen::Vector3d</type>
      <name>computeCentroidalZMP</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a394e1cd05547fb851d8dbe8f0ddbbbe5</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPNoGravity</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a29fb02f3699713bd952eac420794f673</anchor>
      <arglist>(Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Vector3d</type>
      <name>computeCentroidalZMPComplete</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>afeb4fb0f92e547a41ae4bd57b09febc7</anchor>
      <arglist>(MultiBodyConfig &amp;mbc, Eigen::Vector3d &amp;com, Eigen::Vector3d &amp;comA, double altitude, sva::ForceVecd wr_external, double mass)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>rbd::ik</name>
    <filename>a00382.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>MAX_ITERATIONS</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>ae317f521fae5c7b22bfbb9a78a61d18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>LAMBDA</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a7d33a0a91940347106715aec2c101e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>THRESHOLD</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a8b016fd4f8f2731c231d7318c18a5ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>ALMOST_ZERO</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>a60f8b844c5af661d2a90adb93619d2c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>RBDyn</title>
    <filename>index</filename>
  </compound>
</tagfile>
